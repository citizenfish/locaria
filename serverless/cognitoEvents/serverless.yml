service: locaria-ce-${env:theme}${env:environment}
projectDir: ../../../
provider:
  name: aws
  profile: ${file(../../../locaria.json):${self:custom.stage}.profile}
  runtime: nodejs14.x
  region: ${file(../../../locaria.json):${self:custom.stage}.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:*
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - "*"
  environment:
    postgresHost: ${file(../outputs/${self:custom.stage}-outputs.json):postgresHost}
    postgresPort: ${file(../outputs/${self:custom.stage}-outputs.json):postgresPort}
    auroraDatabaseName: locaria${env:theme}${env:environment}
    auroraMasterUser: ${file(../../../locaria.json):${self:custom.stage}.auroraMasterUser}
    auroraMasterPass: ${file(../../../locaria.json):${self:custom.stage}.auroraMasterPass}

custom:
  stage: "${opt:stage, self:provider.stage}"

functions:
  postConfirmationTrigger:
    handler: postConfirmationTrigger.run
    vpc:
      securityGroupIds:
        - ${file(../outputs/${self:custom.stage}-outputs.json):ServerlessSecurityGroup}
      subnetIds:
        - ${file(../outputs/${self:custom.stage}-outputs.json):vpcPrivateSubnetA}
        - ${file(../outputs/${self:custom.stage}-outputs.json):vpcPrivateSubnetB}

plugins:
  - serverless-stack-output