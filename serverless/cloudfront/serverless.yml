service: locaria-cloudfront-${env:theme}${env:environment}
projectDir: ../../../
provider:
  name: aws
  profile: ${file(../../../locaria.json):${self:custom.stage}.profile}
  runtime: nodejs14.x
  region: ${file(../../../locaria.json):${self:custom.stage}.region}


custom:
  stage: "${opt:stage, self:provider.stage}"

resources:
  Resources:
    # Logging
    LogSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: locarialogs-${self:custom.stage}-${env:theme}${env:environment}
    # Website
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: locaria-${self:custom.stage}-${env:theme}${env:environment}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods: [ "GET","POST","PUT" ]
              AllowedOrigins:
                - '*'
              ExposedHeaders: [ ]
              Id: dataCORS
              MaxAge: 3800
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: StaticSite }
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: { "Fn::Join": [ "", [ "arn:aws:s3:::", { Ref: StaticSite }, "/*" ] ] }
              Principal:
                AWS: { "Fn::Join": [ " ", [ "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", { Ref: WebsiteOriginAccessIdentity } ] ] }

    WebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "CloudFrontOriginAccessIdentity"
    WebsiteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Logging:
            IncludeCookies: true
            Bucket: { "Fn::GetAtt": [ "LogSite", "DomainName" ] }
          DefaultCacheBehavior:
            AllowedMethods: [ "GET", "HEAD", "OPTIONS" ]
            TargetOriginId: RendererAPIOrigin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              Headers:
                - Accept
                - Referer
                - Athorization
                - Content-Type
              QueryString: false
          CacheBehaviors:
          - PathPattern: "/Admin/*"
            AllowedMethods: [ "GET", "HEAD", "OPTIONS" ]
            CachedMethods: [ "GET", "HEAD", "OPTIONS" ]
            TargetOriginId: RendererAPIOrigin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            ForwardedValues:
              Headers:
                - Accept
                - Referer
                - Athorization
                - Content-Type
              QueryString: false
          - PathPattern: "*.ico"
            AllowedMethods: [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ]
            CachedMethods: [ "GET", "HEAD", "OPTIONS" ]
            TargetOriginId: WebsiteBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: 'all'
          - PathPattern: "/assets/*"
            AllowedMethods: [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ]
            CachedMethods: [ "GET", "HEAD", "OPTIONS" ]
            TargetOriginId: WebsiteBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: 'all'
          - PathPattern: "/dist/*"
            AllowedMethods: [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ]
            CachedMethods: [ "GET", "HEAD", "OPTIONS" ]
            TargetOriginId: WebsiteBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: 'all'
          - PathPattern: "/mapbox/*"
            AllowedMethods: [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ]
            CachedMethods: [ "GET", "HEAD", "OPTIONS" ]
            TargetOriginId: WebsiteBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: 'all'

          CustomErrorResponses:
            - ErrorCode: '404'
              ResponsePagePath: "/index.html"
              ErrorCachingMinTTL: 1
              ResponseCode: 200
          DefaultRootObject: 'index.html'
          Enabled: true
          PriceClass: 'PriceClass_100'
          HttpVersion: 'http2'
          Aliases:
            - ${file(../../../locaria.json):${self:custom.stage}.themes.${env:theme}.${env:environment}.domain}
          ViewerCertificate:
            AcmCertificateArn: ${file(../../../locaria.json):${self:custom.stage}.themes.${env:theme}.${env:environment}.certARN}
            MinimumProtocolVersion: TLSv1
            SslSupportMethod: sni-only
          Origins:
            - Id: 'WebsiteBucketOrigin'
              OriginPath: /${env:theme}${env:environment}
              DomainName: { "Fn::GetAtt": [ "StaticSite", "DomainName" ] }
              S3OriginConfig:
                OriginAccessIdentity: { "Fn::Join": [ "", [ "origin-access-identity/cloudfront/", { Ref: WebsiteOriginAccessIdentity } ] ] }
            - Id: 'RendererAPIOrigin'
              OriginPath: /${self:custom.stage}
              DomainName: ${file(../outputs/${self:custom.stage}-outputs-${env:theme}-${env:environment}.json):rendererAPI}.execute-api.${file(../../../locaria.json):${self:custom.stage}.region}.amazonaws.com
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                - TLSv1.2
plugins:
  - serverless-stack-output