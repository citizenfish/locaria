service: lr-${env:theme}${env:environment}
projectDir: ../../../
provider:
  name: aws
  profile: ${file(../../../locaria.json):${self:custom.stage}.profile}
  runtime: nodejs14.x
  region: ${file(../../../locaria.json):${self:custom.stage}.region}
  environment:
    postgresHost: ${file(../outputs/${self:custom.stage}-outputs.json):postgresHost}
    postgresPort: ${file(../outputs/${self:custom.stage}-outputs.json):postgresPort}
    auroraDatabaseName: locaria${env:theme}${env:environment}
    auroraMasterUser: ${file(../../../locaria.json):${self:custom.stage}.auroraMasterUser}
    auroraMasterPass: ${file(../../../locaria.json):${self:custom.stage}.auroraMasterPass}
    pool: ${file(../outputs/${self:custom.stage}-outputs-${env:theme}-${env:environment}.json):cognitoPoolId}
    importBucket: locaria-${self:custom.stage}-${env:theme}${env:environment}
    region: ${file(../../../locaria.json):${self:custom.stage}.region}
    theme: ${env:theme}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::*
        - Effect: 'Allow'
          Action:
            - cloudfront:*
          Resource:
            - "*"
        - Effect: 'Allow'
          Action:
            - execute-api:Invoke
          Resource:
            - "*"
custom:
  stage: "${opt:stage, self:provider.stage}"

functions:
  locariaRender:
    handler: locarialRenderer.run
    vpc:
      securityGroupIds:
        - ${file(../outputs/${self:custom.stage}-outputs.json):ServerlessSecurityGroup}
      subnetIds:
        - ${file(../outputs/${self:custom.stage}-outputs.json):vpcPrivateSubnetA}
        - ${file(../outputs/${self:custom.stage}-outputs.json):vpcPrivateSubnetB}
    events:
      - http:
          path: /Admin/{proxy+}
          method: GET
      - http:
          path: /{proxy+}
          method: GET




plugins:
  - serverless-stack-output